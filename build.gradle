buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

apply plugin: 'forge'
apply plugin: 'signing'

file "build.properties" withReader {
    def prop = new Properties()
    prop.load(it)
    ext.config = new ConfigSlurper().parse prop
}

version = "${config.architecturecraft.version}"
group = "gcewing.architecture"
archivesBaseName = "ArchitectureCraft"

minecraft {
    version = "${config.forge.version}-${config.minecraft.version}"
}

sourceSets.main {
	//compileClasspath += files("lib")
	compileClasspath += fileTree(dir: "lib").matching{include "*.jar"}
	java.srcDirs "src/base", "src/mod"
	resources.srcDirs "src/resources"
}

//jar {
//	exclude "ic2"
//}

processResources {

    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    //inputs.property "mcversion", project.mcversion

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        //expand 'version':project.version, 'mcversion':project.minecraft.version, 'modid':project.ArchitectureCraft
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

task signJar(dependsOn: 'reobf'){
    doLast {
        ant.signjar(
            destDir: jar.destinationDir,
            jar: jar.getArchivePath(),
            alias: findProperty('keyStoreAlias') ?: '',
            keystore: findProperty('keyStore') ?: '',
            storepass: findProperty('keyStorePass') ?: '',
            digestalg: findProperty('signDigestAlg') ?: '',
            tsaurl: findProperty('signTSAurl') ?: '',
            verbose: true
            )
    }
}